"""Add patient and doctor models

Revision ID: c7210edda80e
Revises: 155aeed7185e
Create Date: 2025-10-20 20:20:28.145223

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel.sql.sqltypes

# revision identifiers, used by Alembic.
revision = 'c7210edda80e'
down_revision = '155aeed7185e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('doctors',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('legal_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('preferred_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('gender', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('profile_image_url', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('license_number', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('specializations', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('years_of_practice', sa.Integer(), nullable=True),
    sa.Column('medical_school', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('certifications', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('languages', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('consultation_fee', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('rating_average', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('total_ratings', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('available_for_consultation', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_doctors_license_number'), 'doctors', ['license_number'], unique=True)
    op.create_index(op.f('ix_doctors_rating_average'), 'doctors', ['rating_average'], unique=False)
    op.create_index(op.f('ix_doctors_user_id'), 'doctors', ['user_id'], unique=True)
    op.create_table('patients',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('legal_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('preferred_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('biological_sex', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('gender_identity', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('national_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('profile_image_url', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('emergency_contact_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('emergency_contact_phone', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('address', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patients_date_of_birth'), 'patients', ['date_of_birth'], unique=False)
    op.create_index(op.f('ix_patients_legal_name'), 'patients', ['legal_name'], unique=False)
    op.create_index(op.f('ix_patients_national_id'), 'patients', ['national_id'], unique=True)
    op.create_index(op.f('ix_patients_user_id'), 'patients', ['user_id'], unique=True)
    op.create_table('doctor_schedules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('doctor_id', sa.Uuid(), nullable=False),
    sa.Column('day_of_week', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=True),
    sa.Column('end_time', sa.Time(), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_doctor_schedules_doctor_id'), 'doctor_schedules', ['doctor_id'], unique=False)
    op.create_table('patient_conditions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('medical_code_id', sa.Uuid(), nullable=False),
    sa.Column('diagnosed_date', sa.Date(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('severity', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('diagnosed_by_id', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['diagnosed_by_id'], ['doctors.id'], ),
    sa.ForeignKeyConstraint(['medical_code_id'], ['medical_codes.id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patient_conditions_diagnosed_date'), 'patient_conditions', ['diagnosed_date'], unique=False)
    op.create_index(op.f('ix_patient_conditions_medical_code_id'), 'patient_conditions', ['medical_code_id'], unique=False)
    op.create_index(op.f('ix_patient_conditions_patient_id'), 'patient_conditions', ['patient_id'], unique=False)
    op.create_index(op.f('ix_patient_conditions_status'), 'patient_conditions', ['status'], unique=False)
    op.create_table('patient_habits',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('habit_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('target_value', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('target_unit', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('actual_value', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patient_habits_date'), 'patient_habits', ['date'], unique=False)
    op.create_index(op.f('ix_patient_habits_habit_type'), 'patient_habits', ['habit_type'], unique=False)
    op.create_index(op.f('ix_patient_habits_patient_id'), 'patient_habits', ['patient_id'], unique=False)
    op.create_table('patient_vitals',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('patient_id', sa.Uuid(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(), nullable=False),
    sa.Column('blood_type', sqlmodel.sql.sqltypes.AutoString(length=5), nullable=True),
    sa.Column('blood_pressure_systolic', sa.Integer(), nullable=True),
    sa.Column('blood_pressure_diastolic', sa.Integer(), nullable=True),
    sa.Column('heart_rate_bpm', sa.Integer(), nullable=True),
    sa.Column('temperature_celsius', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('respiratory_rate', sa.Integer(), nullable=True),
    sa.Column('oxygen_saturation', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('glucose_level', sa.DECIMAL(precision=6, scale=2), nullable=True),
    sa.Column('weight_kg', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('height_cm', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('bmi', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('recorded_by_type', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('recorded_by_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patient_vitals_patient_id'), 'patient_vitals', ['patient_id'], unique=False)
    op.create_index(op.f('ix_patient_vitals_recorded_at'), 'patient_vitals', ['recorded_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_patient_vitals_recorded_at'), table_name='patient_vitals')
    op.drop_index(op.f('ix_patient_vitals_patient_id'), table_name='patient_vitals')
    op.drop_table('patient_vitals')
    op.drop_index(op.f('ix_patient_habits_patient_id'), table_name='patient_habits')
    op.drop_index(op.f('ix_patient_habits_habit_type'), table_name='patient_habits')
    op.drop_index(op.f('ix_patient_habits_date'), table_name='patient_habits')
    op.drop_table('patient_habits')
    op.drop_index(op.f('ix_patient_conditions_status'), table_name='patient_conditions')
    op.drop_index(op.f('ix_patient_conditions_patient_id'), table_name='patient_conditions')
    op.drop_index(op.f('ix_patient_conditions_medical_code_id'), table_name='patient_conditions')
    op.drop_index(op.f('ix_patient_conditions_diagnosed_date'), table_name='patient_conditions')
    op.drop_table('patient_conditions')
    op.drop_index(op.f('ix_doctor_schedules_doctor_id'), table_name='doctor_schedules')
    op.drop_table('doctor_schedules')
    op.drop_index(op.f('ix_patients_user_id'), table_name='patients')
    op.drop_index(op.f('ix_patients_national_id'), table_name='patients')
    op.drop_index(op.f('ix_patients_legal_name'), table_name='patients')
    op.drop_index(op.f('ix_patients_date_of_birth'), table_name='patients')
    op.drop_table('patients')
    op.drop_index(op.f('ix_doctors_user_id'), table_name='doctors')
    op.drop_index(op.f('ix_doctors_rating_average'), table_name='doctors')
    op.drop_index(op.f('ix_doctors_license_number'), table_name='doctors')
    op.drop_table('doctors')
    # ### end Alembic commands ###

